#!/bin/sh
# Today's Internet is basically a two tier system, at least in the home.
# Inside the home, you are running at > 100Mbit speeds, with very short
# RTT times. The TCP protocol will quickly adjust it's rate to that.
# Outside the home, you are running at < 10Mbit speeds for uploads,
# typically, and TCP can run out of control.

# So, we attempt to 'run wild' inside the home, and rate limit things
# exiting it. Additionally we prioritize things like DNS over everything
# else. 

# This does QFQ across machines, and then QFQ inside each machine's stream

BATCH=1
NAT=0
MYNETS=172.30.48.0/24
IW10=1

if [ $BATCH = 1 ]
then
TC=cat
TCOPTS=""
else
TC=~d/git/iproute2/tc/tc 
TCOPTS="-b"
fi

IFACE=wlan0
MACHINES=2
BINS=2 # at 16 bins it goes boom for some reason with default txqueuelen
LIMIT=64
DEC_RATE=300000
DEC_UPLINK=300000
UPLINK=$((1024*$DEC_UPLINK/1000))
RATE=$((1024*$DEC_RATE/1000)) 
MTU=1500

# FIXME: LIMITS are tough AND THIS NEEDS TO BE A SQUARE ROOT
  LIMIT=4
[ $UPLINK -gt 999 ] && LIMIT=8
[ $UPLINK -gt 9990 ] && LIMIT=16
[ $UPLINK -gt 99900 ] && LIMIT=64
[ $UPLINK -gt 999000 ] && LIMIT=100

# echo "Setting limit to $LIMIT"

# Optimize for ping? (useful for tests)

PING_TOP=0 # 
PING_MACH=1 #
PING_SUBCLASS=1 #

#BIGQDISC="pfifo limit $LIMIT"
#BIGQDISC="pfifo_head_drop limit $LIMIT"
BIGQDISC="red min 48000 max 96000 probability 0.01 avpkt 800 limit 196000 burst 64 ecn"
BASE=40

# Yes, virginia, you actually need a txqueuelen
# this long, unless you want to start tail dropping
# at the queue itself. 

TXQUEUELEN=$(($BINS*$MACHINES*$LIMIT))

# But Linux seems to get buggy at > 1000
# And this of course induces starvation problems

[ $TXQUEUELEN -gt 1000 ] && TXQUEUELEN=1000
[ $TXQUEUELEN -lt 4 ] && TXQUEUELEN=4

printf "qdisc del dev $IFACE root\n" | ${TC} ${TCOPTS}
ethtool -K $IFACE tso off
ethtool -K $IFACE gso off
ifconfig $IFACE txqueuelen $TXQUEUELEN 

modprobe sch_htb
modprobe sch_sfq

# And then we go nuts with QFQ

build_qfq(){
local HTB_HANDLE=$1
local BASE=$2

printf "qdisc add dev %s parent 1:%x handle %x qfq\n" $IFACE $HTB_HANDLE $BASE

# Setting all this up is high overhead so lets
# setup the the default bins first

MULTICAST=$(($MACHINES+1))
DEFAULTB=$(($MACHINES+2))

printf "class add dev %s parent %x classid %x:%x qfq\n"       $IFACE $BASE $BASE $MULTICAST
printf "qdisc add dev %s parent %x:%x handle %x $BIGQDISC\n"  $IFACE $BASE $MULTICAST $MULTICAST

printf "class add dev %s parent %x: classid %x:%x qfq\n"      $IFACE $BASE $BASE $DEFAULTB
printf "qdisc add dev %s parent %x:%x handle %x $BIGQDISC\n"  $IFACE $BASE $DEFAULTB $DEFAULTB

# This is a catchall for everything while we setup

printf "filter add dev %s protocol all parent %x: \
        prio 999 u32 match ip protocol 0 0x00 flowid %x:%x\n" $IFACE $BASE $BASE $DEFAULTB

# Schedule all multicast/broadcast traffic in one bin
# Multicast and broadcast are basically a 'machine', a very slow,
# weird one.

prio=4
printf "filter add dev %s protocol 802_3 parent %x: prio %d \
        u32 match u16 0x0100 0x0100 at 0 flowid %x:%x\n" $IFACE $BASE $prio $BASE $MULTICAST
for proto in arp ip ipv6
do
prio=$(($prio+1))
printf "filter add dev %s protocol %s parent %x: prio %d \
        u32 match u16 0x0100 0x0100 at -14 flowid %x:%x\n" $IFACE $proto $BASE $prio $BASE $MULTICAST
done

# Setup the per machine classes
FILTERS=10
t=$(($BINS + 1))
t1=$(($BINS + 3))

for i in `seq 0 $MACHINES`
do
MACHCLASS=$(($BASE+$i+1))
printf "class add dev %s parent %x: classid %x:%x qfq\n" $IFACE $BASE $BASE $i
printf "qdisc add dev %s parent %x:%x handle %x qfq\n"   $IFACE $BASE $i $MACHCLASS
for b in `seq 0 $BINS`
do
	printf "class add dev %s parent %x: classid %x:%x qfq\n" $IFACE $MACHCLASS $MACHCLASS $b
	printf "qdisc add dev %s parent %x:%x $BIGQDISC\n"       $IFACE $MACHCLASS $b
done

# Create some special bins for other stuff

#for b in `seq $t $t1`
#do
#	printf "class add dev %s parent %x: classid %x:%x qfq\n" $IFACE $MACHSUBC $MACHSUBC $b
#	printf "qdisc add dev %s parent %x:%x $BIGQDISC\n"       $IFACE $MACHSUBC $b
#done

# Add stream filters to the per machine qdiscs (they won't be active yet)
# A different filter is needed for NAT outgoing interface

FILTERS=$(($FILTERS+1))
printf "filter add dev %s protocol ip parent %x: \
	handle %d prio 97 flow hash keys rxhash,proto-dst divisor %d\n" $IFACE $MACHCLASS $FILTERS $BINS

FILTERS=$(($FILTERS+1))
printf "filter add dev %s protocol ipv6 parent %x: \
	handle %d prio 98 flow hash keys rxhash,proto-dst divisor %d\n" $IFACE $MACHCLASS $FILTERS $BINS

# ICMP (ip protocol 1) on a machine it's own

[ $PING_MACHCLASS ] && printf "filter add dev %s parent %x: protocol ip prio 1 u32 \
        match ip protocol 1 0xff flowid %x:%x\n" $IFACE $MACHCLASS $MACHCLASS $DEFAULTB

# And make ABSOLUTELY sure we capture everything we missed with the filters
#FILTERS=`expr $FILTERS + 1`
#printf "filter add dev $IFACE protocol all parent ${MACHSUBCX}: \
#       handle ${FILTERS} prio 999 u32 match ip protocol 0 0x00 \
#       flowid ${$MACHSUBC}:$def

done

}

(
printf "qdisc add dev $IFACE root handle 1: htb default 3\n"

# shape everything at $RATE speed - this prevents huge queues in your
# desktop which destroy latency:

BURST=64b
printf "class add dev $IFACE parent 1: classid 1:1 htb rate ${RATE}kbit burst ${BURST}\n"

# high prio class 1:2:

printf "class add dev %s parent 1:1 classid 1:%x htb rate ${RATE}kbit \
   burst ${BURST} prio 1\n" $IFACE 2

# Default class 1:3 - the gateway device

printf "class add dev %s parent 1:1 classid 1:%x htb rate $(($UPLINK))kbit \
   burst ${BURST} prio 2\n" $IFACE 3

# Default class 1:4 - the local network

printf "class add dev %s parent 1:1 classid 1:%x htb rate $(($RATE))kbit \
   burst ${BURST} prio 3\n" $IFACE 4

# The highest prio gets Stochastic Fairness:

printf "qdisc add dev $IFACE parent 1:2 handle 10: sfq perturb 10\n"

# ICMP (ip protocol 1) in the interactive class 1:2 so we
# can do measurements & impress our friends:

[ $PING_TOP = 1 ] && printf "filter add dev $IFACE parent 1:0 protocol ip prio 10 u32 \
       match ip protocol 1 0xff flowid 1:2\n"

# The gateway interface gets priority, but not a lot of bandwidth

build_qfq 3 100

# And the local network gets the rest

#build_qfq 4 200

# And kick everything into action

FILTERS=$(($FILTERS+1))

# Now, if you are testing from one machine, you really want proto-src
# But for deployment, you want the pre-nat source

printf "filter add dev %s protocol ip parent %x:%x handle %d  \
        prio 97 flow hash keys proto-dst divisor %d\n" $IFACE 1 3 $FILTERS $MACHINES

FILTERS=$(($FILTERS+1))

printf "filter add dev %s protocol ipv6 parent %x:%x handle %d \
        prio 98 flow hash keys proto-dst divisor %d\n" $IFACE 1 3 $FILTERS $MACHINES

) | ${TC} ${TCOPTS}

# Walla!

